export interface NextHandlerTemplate {
  authContext: string;
  authHandler: string;
  authImports: { name: string; from: string }[];
  useGraphql: boolean;
}
export const nextHandlerTemplate = `//
// Autogenerated by \`@antribute/backend-cli\`
// Any modifications will be overwritten on subsequent runs.
//

import { NextResponse } from 'next/server';
{{#if useGraphql}}
import { useDisableIntrospection } from '@graphql-yoga/plugin-disable-introspection'
import { createYoga } from 'graphql-yoga'
import schema from '../graphqlSchema';
{{/if}}
{{#each authImports}}import {{name}} from '{{from}}';\n{{/each}}

interface Ctx {
  params: {
    path: string[];
  };
}

{{#if useGraphql}}
const yoga = createYoga({
  context: async () => {
    {{authContext}}
  },
  graphiql: process.env.NODE_ENV !== 'production',
  plugins: process.env.NODE_ENV === 'production' ? [useDisableIntrospection()] : [],
  graphqlEndpoint: '/api/graphql',
  schema,
});
{{/if}}

export async function apiCatchAll(request: Request, ctx: Ctx) {
  {{#if useGraphql}}
  if (ctx.params.path?.[0] === 'graphql') {
    const yogaRes = await yoga.fetch(request, ctx);
    return new NextResponse(yogaRes.body, yogaRes);
  }
  {{/if}}
  {{authHandler}}
  return NextResponse.json({ errors: [{ message: 'Not found.' }] }, { status: 404 });
}

export async function GET(request: Request, ctx: Ctx) {
  return apiCatchAll(request, ctx);
}

export async function POST(request: Request, ctx: Ctx) {
  return apiCatchAll(request, ctx);
}
`;
