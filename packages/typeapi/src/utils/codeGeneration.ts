import { join } from 'path';

import { ModuleDeclarationKind, Project } from 'ts-morph';
import type { SourceFile } from 'ts-morph';
import type { Config } from 'config';

export const createFile = (
  project: Project,
  config: Config,
  fileName: string,
  omitServerDir = false
) => {
  const file = project.createSourceFile(
    omitServerDir ? fileName : join(process.cwd(), config.server.rootDir, fileName),
    undefined,
    { overwrite: true }
  );
  return file;
};

export const createTsProject = () => {
  const project = new Project({
    skipAddingFilesFromTsConfig: true,
    // TODO: Add support for custom tsconfig paths
    tsConfigFilePath: join(process.cwd(), 'tsconfig.json'),
  });
  return project;
};

export const createGlobalDeclaration = (file: SourceFile) => {
  return file.addModule({
    hasDeclareKeyword: true,
    declarationKind: ModuleDeclarationKind.Global,
    name: 'global',
  });
};

export const getAllExportDeclarationsFromFile = (file?: SourceFile) =>
  file
    ?.getVariableStatements()
    .filter((variableStatement) => variableStatement.hasExportKeyword())
    .map((variableStatement) => variableStatement.getDeclarations())
    .flatMap((variableDeclarations) => variableDeclarations) ?? [];

export const insertDisclaimer = (file: SourceFile) => {
  file.insertText(0, (writer) => {
    writer.writeLine('// Autogenerated by TypeAPI, do not modify').blankLine();
  });
};
