import glob from 'fast-glob';
import { mkdir, writeFile } from 'fs/promises';
import { join, resolve } from 'path';
import type { Config } from 'utils/config';
import logger from 'utils/logger';

// Once we finalize adding more capabilities like auth, this will likely need modification
export const generateGraphqlBuilder = async (config: Config) => {
  if (!config.graphql.enabled) {
    logger.info('GraphQL capability set to false, skipping generation', config);
    return;
  }
  if (config.graphql.builderPath) {
    logger.info('Pothos builder specified in config, skipping generation', config);
    return;
  }

  let builderOrmImports = '';
  let builderTypings = '';
  let builderPlugins: string[] = [];
  let builderBody = '';

  // Disabling this rule for now as we plan on adding support for more ORMs in the future
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  if (config.orm.platform === 'prisma') {
    logger.debug('Adding builder imports for Prisma ORM', config);
    builderOrmImports = `${builderOrmImports}
import PrismaPlugin from '@pothos/plugin-prisma';
import PrismaUtilPlugin from '@pothos/plugin-prisma-utils';
import { prisma } from '../db';
import type PrismaTypes from '../pothos';
`;

    logger.debug('Adding builder typings for Prisma ORM', config);
    builderTypings = `${builderTypings}
  PrismaTypes: PrismaTypes;`;

    logger.debug('Adding builder plugins for Prisma ORM', config);
    builderPlugins = [...builderPlugins, 'PrismaPlugin', 'PrismaUtilPlugin'];

    logger.debug('Adding builder body for Prisma ORM', config);
    builderBody = `${builderBody}

  prisma: {
    client: prisma,
  },`;
  }

  const builderOutput = `//
// Autogenerated by \`@antribute/backend-cli\`
// Any modifications will be overwritten on subsequent runs.
//

import SchemaBuilder from '@pothos/core';${builderOrmImports}

const builder = new SchemaBuilder<{
${builderTypings}
}>({
  plugins: [${builderPlugins.join(', ')}],
  ${builderBody}
});

builder.queryType({});
builder.mutationType({});

export default builder;
`;

  const builderDir = resolve(process.cwd(), config.server.dir, 'generated', 'builder');
  logger.debug(`Creating builder directory (if it doesn't already exist) at ${builderDir}`, config);
  await mkdir(builderDir, { recursive: true });
  const builderFile = resolve(builderDir, 'index.ts');
  logger.debug(`Writing builder to ${builderFile}`, config);

  await writeFile(builderFile, builderOutput);
  logger.info('GraphQL Builder Successfully Generated', config);
};

export const generateGraphqlSchema = async (config: Config) => {
  if (!config.graphql.enabled) {
    logger.info('GraphQL capability set to false, skipping schema generation', config);
    return;
  }
  logger.debug('Computing directories for Pothos schema generating', config);
  const schemaPartsGlob = join(config.server.dir, '**', '*.{mutations,objects,queries}.ts');
  logger.debug(`Schema search glob set to ${schemaPartsGlob}`, config);
  const generatedPothosSchemaPath = resolve(process.cwd(), config.server.dir, 'schema', 'index.ts');
  logger.debug(`Schema output file set to ${generatedPothosSchemaPath}`, config);

  logger.debug('Starting Pothos schema build', config);
  let schemaOutput = `//
// Autogenerated by \`@antribute/backend-cli\`
// Any modifications will be overwritten on subsequent runs.
//

import builder from '../builder';
`;
  const schemaParts = await glob(schemaPartsGlob);
  schemaParts.forEach((schemaPartPath: string) => {
    const parsedServerDir = config.server.dir.includes('./')
      ? config.server.dir.split('./')[1]!
      : config.server.dir;
    const relativePath = schemaPartPath.split(parsedServerDir)[1];
    if (relativePath) {
      logger.debug(`Found Pothos schema chunk at ${schemaPartsGlob}`, config);
      schemaOutput = `${schemaOutput}
import '../..${relativePath.split('.ts')[0]!}';`;
    }
  });

  schemaOutput = `${schemaOutput}
const schema = builder.toSchema();
export default schema;
`;

  const schemaDir = resolve(process.cwd(), config.server.dir, 'generated', 'schema');
  logger.debug(`Creating schema directory (if it doesn't already exist) at ${schemaDir}`, config);

  await mkdir(schemaDir, { recursive: true });
  logger.debug('Schema directory created successfully', config);

  const schemaFile = resolve(schemaDir, 'index.ts');
  logger.debug(`Writing Pothos schema to ${schemaFile}`, config);

  await writeFile(schemaFile, schemaOutput);
  logger.info('GraphQL Schema Successfully Generated', config);
};
