import { mkdir, writeFile } from 'fs/promises';
import { resolve } from 'path';
import type { Config } from 'utils/config';
import logger from 'utils/logger';

export const generateNextPlatform = async (config: Config) => {
  // TODO: This doesn't support REST right now, we should figure out how to best-support REST. This
  // is 100% on the roadmap but currently not relevant for our own internal products
  const handlerOutput = `//
// Autogenerated by \`@antribute/backend-cli\`
// Any modifications will be overwritten on subsequent runs.
//

import { createYoga } from 'graphql-yoga'
import { NextResponse } from 'next/server';
import schema from '../schema';

interface Ctx {
  params: {
    path: string[];
  };
}

export async function apiCatchAll(request: Request, { params }: Ctx) {
  const yoga = createYoga({
    graphqlEndpoint: '/api/graphql',
    schema,
  });

  const yogaRes = await yoga.fetch(request);
  return new NextResponse(yogaRes.body, yogaRes);
}

export async function GET(request: Request, ctx: Ctx) {
  return apiCatchAll(request, ctx);
}

export async function POST(request: Request, ctx: Ctx) {
  return apiCatchAll(request, ctx);
}
`;

  const nextDir = resolve(process.cwd(), config.server.dir, 'generated', 'nextjs');
  logger.debug(
    `Creating Next.js handler directory (if it doesn't already exist) at ${nextDir}`,
    config
  );
  await mkdir(nextDir, { recursive: true });
  const nextFile = resolve(nextDir, 'index.ts');
  logger.debug(`Writing Next.js handler to ${nextFile}`, config);
  await writeFile(nextFile, handlerOutput);

  logger.info('Next.js Platform Successfully Generated', config);
};

export const generatePlatform = async (config: Config) => {
  switch (config.server.platform) {
    case 'express':
      logger.debug('Selected Platform: Express.js', config);
      logger.warn(
        'Express.js platform is not currently supported, please try again in future versions',
        config
      );
      break;
    case 'next':
      logger.debug('Selected Platform: Next.js', config);
      await generateNextPlatform(config);
      break;
    default:
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
      throw new Error(`Invalid Platform ${config.server.platform}`);
  }
};
